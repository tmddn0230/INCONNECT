// MultiByte 

// 개념: MultiByte 문자는 여러 개의 바이트로 구성된 문자 집합을 나타냅니다.
// MultiByte Character Set (MBCS)은 문자 당 하나 이상의 바이트를 사용하는 문자 인코딩 방식입니다.

// 1. 하나의 문자가 1바이트 또는 그 이상의 바이트로 표현될 수 있습니다.
// 2. 가변 길이 인코딩을 사용하므로 문자의 길이를 정확히 알기 위해서는 처음부터 읽어야 합니다.
// 3. 공간 절약이 가능하지만, 문자열 처리 시 복잡도가 증가할 수 있습니다.

//============================================================================================

// WideChar

// 개념: WideChar 문자는 고정된 길이의 2바이트 또는 4바이트로 구성된 문자 집합을 나타냅니다.
// Wide Character Set (WCS)은 문자 당 고정된 길이(일반적으로 2바이트 또는 4바이트)를 사용하는 인코딩 방식입니다.

// 1. 각 문자가 고정된 길이의 바이트로 표현되므로 문자열의 임의 위치 접근이 용이합니다.
// 2. 고정 길이 인코딩을 사용하여 다국어 지원이 용이합니다.
// 3. 다소 큰 메모리를 사용할 수 있습니다.

// CP_ACP를 사용하여 멀티바이트 문자열을 와이드 문자열로 변환하고, 그 반대로 변환하는 과정을 보여줍니다. 
// CP_ACP를 사용함으로써 시스템의 기본 ANSI 코드 페이지를 기준으로 변환이 이루어집니다.

//============================================================================================

// 16진수 
// 0x00 : 0

//============================================================================================


// memmove
// 메모리의 한 영역에서 다른 영역으로 데이터를 안전하게 복사하는 데 사용됩니다. memcpy와 유사하지만,
// memmove는 원본과 목적지가 겹칠 수 있는 경우에도 올바르게 작동한다는 점에서 다릅니다.
// memcpy는 이러한 겹침을 고려하지 않으므로, 두 영역이 겹칠 가능성이 있을 때는 memmove를 사용해야 합니다.

// void *memmove(void *dest, const void *src, size_t n);

// dest는 데이터가 복사될 목적지 메모리 블록의 포인터입니다.
// src는 데이터를 복사할 원본 메모리 블록의 포인터입니다.
// n은 복사할 바이트 수입니다.